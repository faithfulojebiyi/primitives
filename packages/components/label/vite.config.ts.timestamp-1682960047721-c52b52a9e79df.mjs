// vite.config.ts
import path, { resolve } from "node:path";
import Vue from "file:///Users/claranceliberi/projects/oku/primitives/node_modules/.pnpm/@vitejs+plugin-vue@4.2.1_vite@4.3.1_vue@3.3.0-beta.2/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { defineConfig } from "file:///Users/claranceliberi/projects/oku/primitives/node_modules/.pnpm/vite@4.3.1/node_modules/vite/dist/node/index.js";
import dtsPlugin from "file:///Users/claranceliberi/projects/oku/primitives/node_modules/.pnpm/vite-plugin-dts@2.3.0_vite@4.3.1/node_modules/vite-plugin-dts/dist/index.mjs";
import VueMacros from "file:///Users/claranceliberi/projects/oku/primitives/node_modules/.pnpm/unplugin-vue-macros@2.1.0_vite@4.3.1_vue@3.3.0-beta.2/node_modules/unplugin-vue-macros/dist/vite.mjs";

// package.json
var peerDependencies = {
  vue: "^3.3.0-beta.3"
};
var dependencies = {
  "@oku-ui/primitive": "workspace:^"
};

// vite.config.ts
var __vite_injected_original_dirname = "/Users/claranceliberi/projects/oku/primitives/packages/components/label";
var externals = [
  ...Object.keys(peerDependencies || {}),
  ...Object.keys(dependencies || {})
];
var vite_config_default = defineConfig({
  plugins: [
    dtsPlugin({
      include: ["./src/**/*.ts", "./src/**/*.tsx", "./src/**/*.vue"],
      skipDiagnostics: false,
      staticImport: true,
      outputDir: ["./dist/types"],
      cleanVueFileName: false
    }),
    VueMacros({
      plugins: {
        vue: Vue()
      }
    })
  ],
  resolve: {
    alias: {
      "@": resolve(__vite_injected_original_dirname, "src")
    }
  },
  build: {
    lib: {
      entry: path.resolve(__vite_injected_original_dirname, "./src/index.ts"),
      formats: ["es", "cjs"]
    },
    rollupOptions: {
      external: externals
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2NsYXJhbmNlbGliZXJpL3Byb2plY3RzL29rdS9wcmltaXRpdmVzL3BhY2thZ2VzL2NvbXBvbmVudHMvbGFiZWxcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9jbGFyYW5jZWxpYmVyaS9wcm9qZWN0cy9va3UvcHJpbWl0aXZlcy9wYWNrYWdlcy9jb21wb25lbnRzL2xhYmVsL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9jbGFyYW5jZWxpYmVyaS9wcm9qZWN0cy9va3UvcHJpbWl0aXZlcy9wYWNrYWdlcy9jb21wb25lbnRzL2xhYmVsL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHBhdGgsIHsgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCdcblxuaW1wb3J0IFZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJ1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcW1oYy92aXRlLXBsdWdpbi1kdHNcbmltcG9ydCBkdHNQbHVnaW4gZnJvbSAndml0ZS1wbHVnaW4tZHRzJ1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3h6ei91bnBsdWdpbi12dWUtbWFjcm9zXG5pbXBvcnQgVnVlTWFjcm9zIGZyb20gJ3VucGx1Z2luLXZ1ZS1tYWNyb3Mvdml0ZSdcblxuaW1wb3J0ICogYXMgcGtnIGZyb20gJy4vcGFja2FnZS5qc29uJ1xuXG5jb25zdCBleHRlcm5hbHMgPSBbXG4gIC4uLk9iamVjdC5rZXlzKHBrZy5wZWVyRGVwZW5kZW5jaWVzIHx8IHt9KSxcbiAgLi4uT2JqZWN0LmtleXMocGtnLmRlcGVuZGVuY2llcyB8fCB7fSksXG5dXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbXG4gICAgZHRzUGx1Z2luKHtcbiAgICAgIGluY2x1ZGU6IFsnLi9zcmMvKiovKi50cycsICcuL3NyYy8qKi8qLnRzeCcsICcuL3NyYy8qKi8qLnZ1ZSddLFxuICAgICAgc2tpcERpYWdub3N0aWNzOiBmYWxzZSxcbiAgICAgIHN0YXRpY0ltcG9ydDogdHJ1ZSxcbiAgICAgIG91dHB1dERpcjogWycuL2Rpc3QvdHlwZXMnXSxcbiAgICAgIGNsZWFuVnVlRmlsZU5hbWU6IGZhbHNlLFxuICAgIH0pLFxuICAgIFZ1ZU1hY3Jvcyh7XG4gICAgICBwbHVnaW5zOiB7XG4gICAgICAgIHZ1ZTogVnVlKCksXG4gICAgICB9LFxuICAgIH0pLFxuICBdLFxuICByZXNvbHZlOiB7XG4gICAgYWxpYXM6IHtcbiAgICAgICdAJzogcmVzb2x2ZShfX2Rpcm5hbWUsICdzcmMnKSxcbiAgICB9LFxuICB9LFxuICBidWlsZDoge1xuICAgIGxpYjoge1xuICAgICAgZW50cnk6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL3NyYy9pbmRleC50cycpLFxuICAgICAgZm9ybWF0czogWydlcycsICdjanMnXSxcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIGV4dGVybmFsOiBleHRlcm5hbHMsXG4gICAgfSxcbiAgfSxcbn0pXG4iLCAie1xuICBcIm5hbWVcIjogXCJAb2t1LXVpL2xhYmVsXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJzb3VyY2VcIjogXCJzcmMvaW5kZXgudHNcIixcbiAgXCJmdW5kaW5nXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3Nwb25zb3JzL3Byb2R1Y3RkZXZib29rXCIsXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL29rdS11aS5jb20vcHJpbWl0aXZlc1wiLFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9va3UtdWkvcHJpbWl0aXZlcy5naXRcIlxuICB9LFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL29rdS11aS9wcmltaXRpdmVzL2lzc3Vlc1wiXG4gIH0sXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuXCI6IHtcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvdHlwZXMvaW5kZXguZC50c1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2xhYmVsLmNqc1wiLFxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvbGFiZWwuanNcIlxuICAgIH1cbiAgfSxcbiAgXCJtYWluXCI6IFwiZGlzdC9sYWJlbC5janNcIixcbiAgXCJtb2R1bGVcIjogXCJkaXN0L2xhYmVsLmpzXCIsXG4gIFwidHlwZXNcIjogXCJkaXN0L3R5cGVzL2luZGV4LmQudHNcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCIsXG4gICAgXCJSRUFETUUubWRcIlxuICBdLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiY2xlYW5cIjogXCJybSAtcmYgZGlzdFwiLFxuICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBwcm9kdWN0aW9uXCIsXG4gICAgXCJkZXZcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBwcm9kdWN0aW9uIC0td2F0Y2hcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIFwibGludDpmaXhcIjogXCJlc2xpbnQgLiAtLWZpeFwiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJ2dWVcIjogXCJeMy4zLjAtYmV0YS4zXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQG9rdS11aS9wcmltaXRpdmVcIjogXCJ3b3Jrc3BhY2U6XlwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBdVksT0FBTyxRQUFRLGVBQWU7QUFFcmEsT0FBTyxTQUFTO0FBQ2hCLFNBQVMsb0JBQW9CO0FBRzdCLE9BQU8sZUFBZTtBQUd0QixPQUFPLGVBQWU7OztBQzJCcEIsdUJBQW9CO0FBQUEsRUFDbEIsS0FBTztBQUNUO0FBQ0EsbUJBQWdCO0FBQUEsRUFDZCxxQkFBcUI7QUFDdkI7OztBRHpDRixJQUFNLG1DQUFtQztBQWF6QyxJQUFNLFlBQVk7QUFBQSxFQUNoQixHQUFHLE9BQU8sS0FBUyxvQkFBb0IsQ0FBQyxDQUFDO0FBQUEsRUFDekMsR0FBRyxPQUFPLEtBQVMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2QztBQUNBLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVM7QUFBQSxJQUNQLFVBQVU7QUFBQSxNQUNSLFNBQVMsQ0FBQyxpQkFBaUIsa0JBQWtCLGdCQUFnQjtBQUFBLE1BQzdELGlCQUFpQjtBQUFBLE1BQ2pCLGNBQWM7QUFBQSxNQUNkLFdBQVcsQ0FBQyxjQUFjO0FBQUEsTUFDMUIsa0JBQWtCO0FBQUEsSUFDcEIsQ0FBQztBQUFBLElBQ0QsVUFBVTtBQUFBLE1BQ1IsU0FBUztBQUFBLFFBQ1AsS0FBSyxJQUFJO0FBQUEsTUFDWDtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLE9BQU87QUFBQSxNQUNMLEtBQUssUUFBUSxrQ0FBVyxLQUFLO0FBQUEsSUFDL0I7QUFBQSxFQUNGO0FBQUEsRUFDQSxPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsTUFDSCxPQUFPLEtBQUssUUFBUSxrQ0FBVyxnQkFBZ0I7QUFBQSxNQUMvQyxTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsSUFDdkI7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFVBQVU7QUFBQSxJQUNaO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
